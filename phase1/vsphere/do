#! /bin/bash

set -o errexit
set -o pipefail
set -o nounset

cd "${BASH_SOURCE%/*}"
f="./../../.config.json"

gen() {
  mkdir -p .tmp/
  jsonnet -J ../../ --multi .tmp/ all.jsonnet
}


deploy() {
  gen
  terraform apply -state=./.tmp/terraform.tfstate .tmp
  rm /usr/local/bin/kubectl
  COMMAND="grep '.phase2.kubernetes_version' ../../.config | cut -d '=' -f2 | tr -d '\"'"
  KUBERNETES_VERSION=$(eval $COMMAND)
  # If the kubectl binary doesn't exist download it.
  if [ ! -f /usr/local/bin/kubectl_$KUBERNETES_VERSION ]; then
    echo "Kubectl binary with version - $KUBERNETES_VERSION doesn't exist. So downloading it."
    wget https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl -O /usr/local/bin/kubectl_$KUBERNETES_VERSION
    chmod +x /usr/local/bin/kubectl_$KUBERNETES_VERSION
  else
    echo "Kubectl binary with version - $KUBERNETES_VERSION already exists."
  fi
  # Create a symbolic link to the kubectl version binary.
  ln -s /usr/local/bin/kubectl_$KUBERNETES_VERSION /usr/local/bin/kubectl
}

destroy() {
  if [[ "${FORCE_DESTROY:-}" == "y" ]]; then
    terraform destroy -state=./.tmp/terraform.tfstate -force .tmp
  else
    terraform destroy -state=./.tmp/terraform.tfstate .tmp
  fi
}

case "${1:-}" in
  "")
    ;;
  "deploy-cluster")
    deploy
    ;;
  "destroy-cluster")
    destroy
    ;;
  "gen")
    gen
    ;;
esac
